% Script to generate the 'heatmap figures' (Fig. 2 & Supp. Fig. 2).

% To generate this figure, it loads data (saved as 
% 'Eq_Genotype_Freqs_N=...') that was generated by iterating the 
% theoretical population genetic model described in the Appendix. The 
% theoretical population genetic model was iterated using the 
% 'Script_to_generate_equilibrium_genotype_frequencies' script.

close all
clearvars
clc

% This loop is used to generate figures for the N=20 case (Figure 2) and
% the N=15 case (Supp. Fig. 2).
for N = [20 15]

figure

% This loads the equilibrium genotype frequencies (results) as well as the 
% parameter values that generated these results. Each dataset is generated
% for a specific value of N (number of founders).
load("Eq_Genotype_Freqs_N="+N+".mat") 


% We use the equilibrium genotype frequencies (res_x22, res_x21, res_x20, 
% res_x12, res_x11, res_x10) to generate the equilibrium...
    
% plasmid frequencies:
res_plas = res_x22+res_x21+res_x12+res_x11 ; 
   
% cooperator frequencies:
res_coop = res_x21+res_x22+res_x12+res_x20 ; % This records the equilibrium cooperator frequency, for different beta and N values.

% plasmid relatedness values:
res_rel = (((res_x12 + res_x22) - (beta.*(res_x12 + res_x22).*(N - 1).*((res_x12 + res_x22) + (res_x11 + res_x21) - 1))./N).^2 - ((res_x12 + res_x22) + (res_x12 + res_x22).^2.*(N - 1) - (2.*beta.*(res_x12 + res_x22).*(N - 1).*((res_x12 + res_x22) + (res_x11 + res_x21) - 1).*(N.*(res_x12 + res_x22) - 2.*(res_x12 + res_x22) + 1))./N - (beta.^2.*(res_x12 + res_x22).*(N - 1).*((res_x12 + res_x22) + (res_x11 + res_x21) - 1).*(N.*(res_x12 + res_x22) - 2.*(res_x12 + res_x22) + 1))./N.^2 + (beta.^2.*(res_x12 + res_x22).*(N - 1).*(N - 2).*((res_x12 + res_x22) + (res_x11 + res_x21) - 1).^2.*(N.*(res_x12 + res_x22) - 3.*(res_x12 + res_x22) + 1))./N.^2)./N)./(((res_x12 + res_x22) - (beta.*(res_x12 + res_x22).*(N - 1).*((res_x12 + res_x22) + (res_x11 + res_x21) - 1))./N).^2 - (res_x12 + res_x22) + (beta.^2.*(res_x12 + res_x22).*(N - 1).*((res_x12 + res_x22) + (res_x11 + res_x21) - 1).*(N.*(res_x12 + res_x22) - 2.*(res_x12 + res_x22) + 1))./N.^2);

% plasmid cooperativeness scores:
res_plas_coop = (res_x22+res_x12) ./ res_plas;

% we set plasmid cooperativeness to N/A in cases where the plasmid doesn't
% invade.
res_plas_coop(res_plas<0.00001)=NaN;

% we set plasmid relatedness to N/A in cases where the plasmid doesn't 
% invade.
res_rel(res_plas<0.00001)=NaN;

% loop across each of the four panels in a four-panel subplot.
for i=1:4

% specifies each of the four panels of the subplot in turn.    
subplot(2,2,i)

% the first panel plots the equilibrium plasmid relatedness.
if i==1
h=pcolor(sR,betaR,res_rel); 
set(h, 'EdgeColor', 'none');

% the second panel plots the equilibrium plasmid cooperativeness.
elseif i==2
h=pcolor(sR,betaR,res_plas_coop); 
set(h, 'EdgeColor', 'none');

% the third panel plots the equilibrium plasmid frequency.
elseif i==3
h=pcolor(sR,betaR,res_plas);
set(h, 'EdgeColor', 'none');

% the fourth panel plots the equilibrium level of overall cooperation.
elseif i==4
h=pcolor(sR,betaR,res_coop); 
set(h, 'EdgeColor', 'none');
end

% This makes the y axis run in the right direction.
set(gca,'YDir','normal')


% The following 10 lines of code are for formatting the figure.
set(gcf,'color','white')
xlim([1 28])
box on
axis([min(sR) round(max(sR),1) min(betaR) round(max(betaR),1)])
yspace=min(betaR):round(max(betaR),1)/10:round(max(betaR),1);
yticks(yspace);
yticklabels({yspace});
xspace = min(sR):round(max(sR),1)/10:round(max(sR),1);
xticks(xspace)
xticklabels({xspace})

% The following 7 lines of code adds a colourbar and formats it.
colorbar
if i==1 
clim([1/N max(max(res_rel))])
colorbar('Ticks',1/N:0.2*(max(max(res_rel))-1/N):max(max(res_rel)))
else
clim([0 1])    
end

% removes outer box from panels.
box off

end
end